import { LevelChoiceType } from "./types";

export const questionCountOptions = [10, 30, 50];

export const hiraganaToRomaji: Record<string, string> = {
  あ: "a",
  い: "i",
  う: "u",
  え: "e",
  お: "o",
  か: "ka",
  き: "ki",
  く: "ku",
  け: "ke",
  こ: "ko",
  さ: "sa",
  し: "shi",
  す: "su",
  せ: "se",
  そ: "so",
  た: "ta",
  ち: "chi",
  つ: "tsu",
  て: "te",
  と: "to",
  な: "na",
  に: "ni",
  ぬ: "nu",
  ね: "ne",
  の: "no",
  は: "ha",
  ひ: "hi",
  ふ: "fu",
  へ: "he",
  ほ: "ho",
  ま: "ma",
  み: "mi",
  む: "mu",
  め: "me",
  も: "mo",
  や: "ya",
  ゆ: "yu",
  よ: "yo",
  ら: "ra",
  り: "ri",
  る: "ru",
  れ: "re",
  ろ: "ro",
  わ: "wa",
  を: "wo",
  ん: "n",
  が: "ga",
  ぎ: "gi",
  ぐ: "gu",
  げ: "ge",
  ご: "go",
  ざ: "za",
  じ: "ji",
  ず: "zu",
  ぜ: "ze",
  ぞ: "zo",
  だ: "da",
  ぢ: "ji",
  づ: "zu",
  で: "de",
  ど: "do",
  ば: "ba",
  び: "bi",
  ぶ: "bu",
  べ: "be",
  ぼ: "bo",
  ぱ: "pa",
  ぴ: "pi",
  ぷ: "pu",
  ぺ: "pe",
  ぽ: "po",
  きゃ: "kya",
  きゅ: "kyu",
  きょ: "kyo",
  ぎゃ: "gya",
  ぎゅ: "gyu",
  ぎょ: "gyo",
  にゃ: "nya",
  にゅ: "nyu",
  にょ: "nyo",
  ひゃ: "hya",
  ひゅ: "hyu",
  ひょ: "hyo",
  びゃ: "bya",
  びゅ: "byu",
  びょ: "byo",
  ぴゃ: "pya",
  ぴゅ: "pyu",
  ぴょ: "pyo",
  みゃ: "mya",
  みゅ: "myu",
  みょ: "myo",
  りゃ: "rya",
  りゅ: "ryu",
  りょ: "ryo",
  じゃ: "ja",
  じゅ: "ju",
  じぇ: "je",
  じょ: "jo",
  しゃ: "sha",
  しゅ: "shu",
  しぇ: "she",
  しょ: "sho",
  ちゃ: "cha",
  ちゅ: "chu",
  ちぇ: "che",
  ちょ: "cho",
  ぢゃ: "ja",
  ぢゅ: "ju",
  ぢぇ: "je",
  ぢょ: "jo",
  ゃ: "small ya", // small ya
  ゅ: "small yu", // small yu
  ょ: "small yo", // small yo
  っ: "small tsu", // small tsu (used for double consonants)
  ー: "-", // long vowel mark
};

export const hiraganaOnly = Object.keys(hiraganaToRomaji);

export const romajiToHiragana = Object.fromEntries(
  Object.entries(hiraganaToRomaji).map(([hiragana, romaji]) => [
    romaji,
    hiragana,
  ])
);

export const katakanaToRomaji: Record<string, string> = {
  ア: "a",
  イ: "i",
  ウ: "u",
  エ: "e",
  オ: "o",
  カ: "ka",
  キ: "ki",
  ク: "ku",
  ケ: "ke",
  コ: "ko",
  サ: "sa",
  シ: "shi",
  ス: "su",
  セ: "se",
  ソ: "so",
  タ: "ta",
  チ: "chi",
  ツ: "tsu",
  テ: "te",
  ト: "to",
  ナ: "na",
  ニ: "ni",
  ヌ: "nu",
  ネ: "ne",
  ノ: "no",
  ハ: "ha",
  ヒ: "hi",
  フ: "fu",
  ヘ: "he",
  ホ: "ho",
  マ: "ma",
  ミ: "mi",
  ム: "mu",
  メ: "me",
  モ: "mo",
  ヤ: "ya",
  ユ: "yu",
  ヨ: "yo",
  ラ: "ra",
  リ: "ri",
  ル: "ru",
  レ: "re",
  ロ: "ro",
  ワ: "wa",
  ヲ: "wo",
  ン: "n",
  ガ: "ga",
  ギ: "gi",
  グ: "gu",
  ゲ: "ge",
  ゴ: "go",
  ザ: "za",
  ジ: "ji",
  ズ: "zu",
  ゼ: "ze",
  ゾ: "zo",
  ダ: "da",
  ヂ: "ji",
  ヅ: "zu",
  デ: "de",
  ド: "do",
  バ: "ba",
  ビ: "bi",
  ブ: "bu",
  ベ: "be",
  ボ: "bo",
  パ: "pa",
  ピ: "pi",
  プ: "pu",
  ペ: "pe",
  ポ: "po",
  キャ: "kya",
  キュ: "kyu",
  キョ: "kyo",
  ギャ: "gya",
  ギュ: "gyu",
  ギョ: "gyo",
  ニャ: "nya",
  ニュ: "nyu",
  ニョ: "nyo",
  ヒャ: "hya",
  ヒュ: "hyu",
  ヒョ: "hyo",
  ビャ: "bya",
  ビュ: "byu",
  ビョ: "byo",
  ピャ: "pya",
  ピュ: "pyu",
  ピョ: "pyo",
  ミャ: "mya",
  ミュ: "myu",
  ミョ: "myo",
  リャ: "rya",
  リュ: "ryu",
  リョ: "ryo",
  ジャ: "ja",
  ジュ: "ju",
  ジェ: "je",
  ジョ: "jo",
  シャ: "sha",
  シュ: "shu",
  シェ: "she",
  ショ: "sho",
  チャ: "cha",
  チュ: "chu",
  チェ: "che",
  チョ: "cho",
  ヂャ: "ja",
  ヂュ: "ju",
  ヂェ: "je",
  ヂョ: "jo",
  ャ: "small ya", // small ya
  ュ: "small yu", // small yu
  ョ: "small yo", // small yo
  ッ: "small tsu", // small tsu (used for double consonants)
  ー: "-", // long vowel mark
};

export const katakanaOnly = Object.keys(katakanaToRomaji);

export const romajiToKatakana = Object.fromEntries(
  Object.entries(katakanaToRomaji).map(([katakana, romaji]) => [
    romaji,
    katakana,
  ])
);

export const hiraganaAndKatakanaLevelChoices: LevelChoiceType[] = [
  {
    characterKatakana: "ア",
    characterHiragana: "あ",
    name: `"A" Set Characters`,
    charactersHiragana: ["あ", "い", "う", "え", "お"],
    charactersKatakana: ["ア", "イ", "ウ", "エ", "オ"],
    href: "a-set",
  },
  {
    characterKatakana: "カ",
    characterHiragana: "か",
    name: `"Ga" Set Characters`,
    charactersHiragana: ["か", "き", "く", "け", "こ"],
    charactersKatakana: ["カ", "キ", "ク", "ケ", "コ"],
    href: "ka-set",
  },
  {
    characterKatakana: "サ",
    characterHiragana: "さ",
    name: `"Sa" Set Characters`,
    charactersHiragana: ["さ", "し", "す", "せ", "そ"],
    charactersKatakana: ["サ", "シ", "ス", "セ", "ソ"],
    href: "sa-set",
  },
  {
    characterKatakana: "タ",
    characterHiragana: "た",
    name: `"Ta" Set Characters`,
    charactersHiragana: ["た", "ち", "つ", "て", "と"],
    charactersKatakana: ["タ", "チ", "ツ", "テ", "ト"],
    href: "ta-set",
  },
  {
    characterKatakana: "ナ",
    characterHiragana: "な",
    name: `"Na" Set Characters`,
    charactersHiragana: ["な", "に", "ぬ", "ね", "の"],
    charactersKatakana: ["ナ", "ニ", "ヌ", "ネ", "ノ"],
    href: "na-set",
  },
  {
    characterKatakana: "ハ",
    characterHiragana: "は",
    name: `"Ha" Set Characters`,
    charactersHiragana: ["は", "ひ", "ふ", "へ", "ほ"],
    charactersKatakana: ["ハ", "ヒ", "フ", "ヘ", "ホ"],
    href: "ha-set",
  },
  {
    characterKatakana: "マ",
    characterHiragana: "ま",
    name: `"Ma" Set Characters`,
    charactersHiragana: ["ま", "み", "む", "め", "も"],
    charactersKatakana: ["マ", "ミ", "ム", "メ", "モ"],
    href: "ma-set",
  },
  {
    characterKatakana: "ヤ",
    characterHiragana: "や",
    name: `"Ya" Set Characters`,
    charactersHiragana: ["や", "ゆ", "よ"],
    charactersKatakana: ["ヤ", "ユ", "ヨ"],
    href: "ya-set",
  },
  {
    characterKatakana: "ラ",
    characterHiragana: "ら",
    name: `"Ra" Set Characters`,
    charactersHiragana: ["ら", "り", "る", "れ", "ろ"],
    charactersKatakana: ["ラ", "リ", "ル", "レ", "ロ"],
    href: "ra-set",
  },
  {
    characterKatakana: "ワ",
    characterHiragana: "わ",
    name: `"Wa" & "N" Set Characters`,
    charactersHiragana: ["わ", "を", "ん"],
    charactersKatakana: ["ワ", "ヲ", "ン"],
    href: "wa-set",
  },
  {
    characterKatakana: "ガ",
    characterHiragana: "が",
    name: "Dakuten Set Characters",
    charactersHiragana: [
      "が",
      "ぎ",
      "ぐ",
      "げ",
      "ご",
      "ざ",
      "じ",
      "ず",
      "ぜ",
      "ぞ",
      "だ",
      "ぢ",
      "づ",
      "で",
      "ど",
      "ば",
      "び",
      "ぶ",
      "べ",
      "ぼ",
      "ぱ",
      "ぴ",
      "ぷ",
      "ぺ",
      "ぽ",
    ],
    charactersKatakana: [
      "ガ",
      "ギ",
      "グ",
      "ゲ",
      "ゴ",
      "ザ",
      "ジ",
      "ズ",
      "ゼ",
      "ゾ",
      "ダ",
      "ヂ",
      "ヅ",
      "デ",
      "ド",
      "バ",
      "ビ",
      "ブ",
      "ベ",
      "ボ",
      "パ",
      "ピ",
      "プ",
      "ペ",
      "ポ",
    ],
    href: "dakuten-set",
  },
  {
    characterKatakana: "ヒャ",
    characterHiragana: "ひゃ",
    name: "Combination Set Characters",
    charactersHiragana: [
      "きゃ",
      "きゅ",
      "きょ",
      "ぎゃ",
      "ぎゅ",
      "ぎょ",
      "にゃ",
      "にゅ",
      "にょ",
      "ひゃ",
      "ひゅ",
      "ひょ",
      "びゃ",
      "びゅ",
      "びょ",
      "ぴゃ",
      "ぴゅ",
      "ぴょ",
      "みゃ",
      "みゅ",
      "みょ",
      "りゃ",
      "りゅ",
      "りょ",
      "じゃ",
      "じゅ",
      "じぇ",
      "じょ",
      "しゃ",
      "しゅ",
      "しぇ",
      "しょ",
      "ちゃ",
      "ちゅ",
      "ちぇ",
      "ちょ",
      "ぢゃ",
      "ぢゅ",
      "ぢぇ",
      "ぢょ",
    ],
    charactersKatakana: [
      "キャ",
      "キュ",
      "キョ",
      "ギャ",
      "ギュ",
      "ギョ",
      "ニャ",
      "ニュ",
      "ニョ",
      "ヒャ",
      "ヒュ",
      "ヒョ",
      "ビャ",
      "ビュ",
      "ビョ",
      "ピャ",
      "ピュ",
      "ピョ",
      "ミャ",
      "ミュ",
      "ミョ",
      "リャ",
      "リュ",
      "リョ",
      "ジャ",
      "ジュ",
      "ジェ",
      "ジョ",
      "シャ",
      "シュ",
      "シェ",
      "ショ",
      "チャ",
      "チュ",
      "チェ",
      "チョ",
      "ヂャ",
      "ヂュ",
      "ヂェ",
      "ヂョ",
    ],
    href: "combination-set",
  },
];

export const allCharactersLevel: LevelChoiceType =
  hiraganaAndKatakanaLevelChoices.reduce<LevelChoiceType>(
    (a, c) => {
      return {
        ...a,
        charactersHiragana: [...a.charactersHiragana, ...c?.charactersHiragana],
        charactersKatakana: [...a.charactersKatakana, ...c?.charactersKatakana],
      };
    },
    {
      characterKatakana: "あ",
      characterHiragana: "ア",
      name: `All Characters Set`,
      charactersHiragana: [],
      charactersKatakana: [],
      href: "all-set",
    }
  );
